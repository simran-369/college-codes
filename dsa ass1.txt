#include<bits/stdc++.h>
using namespace std;
int i;
struct student{
    int roll;
    string name;
    float sgpa;
} ;
void display(student *s[],int i){
    for(int j=0;j<i;j++){
              cout<<s[j]->roll<<" "<<s[j]->name<<" "<<s[j]->sgpa<<endl;
    }
}
void linearSearch(float x,int i,student *s[]){
    bool b=0;
    for(int j=0;j<i;j++){
        if(s[j]->sgpa==x){
            cout<<s[j]->roll<<" "<<s[j]->name<<" "<<s[j]->sgpa<<endl;
            b=1;
        }
    }
    if(b==0){
        cout<<"NO STUDENT FOUND"<<endl;
    }
}
void bubble_sort_roll(student *s[],int n){
    bool b=0;
    for(int i=0;i<n;i++){
        for(int j=0;j<n-1;j++){
            if(s[j]->roll>s[j+1]->roll){
                //swaping(s[j],s[j+1])
                student *temp=new student;
                temp=s[j];
                s[j]=s[j+1];
                s[j+1]=temp;
                b=1;
            }
        }
        if(b==0)break;
    }
}
void bubble_sort_name(student *s[],int n){
    bool b=0;
    for(int i=0;i<n;i++){
        for(int j=0;j<n-1;j++){
            if(s[j]->name>s[j+1]->name){
                //swaping(s[j],s[j+1])
                student *temp=new student;
                temp=s[j];
                s[j]=s[j+1];
                s[j+1]=temp;
                b=1;
            }
        }
        if(b==0)break;
    }
}
void binarySearch(string s1,int i,student *s[]){
    int lb=0;
    int ub=i-1;
    int mid=(lb+ub)/2;
    bool b=1;
    while(lb<=ub){
        if(s[mid]->name==s1){
            cout<<s[mid]->roll<<" "<<s[mid]->name<<" "<<s[mid]->sgpa<<endl;
            b=0;
            return;
        }
        else if(s[mid]->name>s1){
            ub=mid-1;
        }
        else{
            lb=mid+1;
        }
        mid=(ub+lb)/2;
    }
    if(b==1){
        cout<<"NO STUDENT FOUND"<<endl;
    }
}
void insertion_sort_name(student *s[],int i){
    for(int t=1;t<i;t++){
        for(int j=t;j>0;j--){
            if(s[j-1]->name > s[j]->name){
                student *temp =new student;
                temp =s[j];
                s[j]=s[j-1];
                s[j-1]=temp;
            }

        }
    }
}
int partition(student *s[],int low,int high){
    float pivot = s[high]->sgpa;
    int m=low-1;
    for(int j=low;j<high;j++){
        if(s[j]->sgpa > pivot){
            m++;
            student *temp =new student;
            temp = s[m];
            s[m]=s[j];
            s[j] = temp;
        }
    }
    student *temp1= new student;
    temp1=s[m+1];
    s[m+1]=s[high];
    s[high]= temp1;
    return (m+1);
}
void quickSort(student *s[],int low,int high){
    if(low<high){
        int pidx = partition(s,low,high);
        quickSort(s,low,pidx-1);
        quickSort(s,pidx+1,high);
    }
}
int main(){
    int n;
    student *s[60];
    int i=0;
    do{
        s[i]=new student;
        cout<<"enter the ROLL_NUM"<<endl;
        cin>>s[i]->roll;
        cout<<"enter the NAME"<<endl;
        cin>>s[i]->name;
        cout<<"enter the SGPA"<<endl;
        cin>>s[i]->sgpa;
        i++;
        cout<<"do you want to store data?";
        cin>>n;
    }while(n==1);
    int k;
    do{
        cout<< "press 1 for DISPLAY"<<endl<<"press 2 for LINEAR SEARCH"<<endl<<"press 3 for BUBBLE SORT"<<endl<<"press 4 for BINARY SEARCH"<<endl<<"press 5 for INSERTION SORT"<<endl<<"press 6 for QUICK SORT"<<endl;
        int choice;
        cin>>choice;
        switch(choice){
            case 1 :
                 { display(s,i);
                    break;}

            case 2 :
             {cout<<"enter SGPA to be found"<<endl;
                float x; cin>>x;
                linearSearch(x,i,s);
                break;}     

            case 3 :
            {bubble_sort_roll(s,i);
            for(int j=0;j<i;j++){
                    cout<<s[j]->roll<<" "<<s[j]->name<<" "<<s[j]->sgpa<<endl;
                }
            break;}

            case 4 :
            {cout<<"enter NAME to be found"<<endl;
            string s1; cin>>s1;
             bubble_sort_name(s,i);
             binarySearch(s1,i,s);
             break;}

             case 5 :
             {insertion_sort_name(s,i);
             for(int j=0;j<i;j++){
                    cout<<s[j]->roll<<" "<<s[j]->name<<" "<<s[j]->sgpa<<endl;
                }
                break;}

             case 6 :
             {quickSort(s,0,i-1);
              for(int j=i-1;j>=(i-10);j--){
                    cout<<s[j]->roll<<" "<<s[j]->name<<" "<<s[j]->sgpa<<endl;
                }
                break;
                }
        }
        cout<<"DO YOU WANT TO CONTINUE"<<endl;
        cin>>k;
    }while(k==1);    
    return 0;
}